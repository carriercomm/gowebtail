package main

import (
	"bytes"
	"compress/gzip"
	"io"
)

// home_html returns raw, uncompressed file data.
func home_html() []byte {
	gz, err := gzip.NewReader(bytes.NewBuffer([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x94, 0x55,
		0x4d, 0x6f, 0xdb, 0x38, 0x10, 0xbd, 0xfb, 0x57, 0x70, 0x99, 0x2c, 0x20,
		0x1f, 0x56, 0x72, 0xb6, 0xed, 0x45, 0x91, 0x7d, 0xe9, 0xa5, 0x87, 0xde,
		0x12, 0xa0, 0x28, 0x82, 0x1c, 0x28, 0x91, 0x96, 0xe8, 0x50, 0x1c, 0x95,
		0xa4, 0xac, 0x18, 0x81, 0xff, 0x7b, 0x87, 0xfa, 0xb6, 0x63, 0xa3, 0x8d,
		0x0e, 0xb6, 0xf8, 0x86, 0x33, 0xef, 0xcd, 0x70, 0x86, 0x4a, 0x0a, 0x57,
		0xaa, 0xcd, 0x22, 0x29, 0x04, 0xe3, 0xf8, 0xe7, 0xa4, 0x53, 0x62, 0x93,
		0x43, 0x23, 0x52, 0xc7, 0xa4, 0x4a, 0xa2, 0x0e, 0x58, 0x24, 0x36, 0x33,
		0xb2, 0x72, 0xc4, 0x1d, 0x2a, 0xb1, 0xa6, 0x4e, 0xbc, 0xba, 0x68, 0xc7,
		0xf6, 0xac, 0x43, 0x29, 0xb1, 0x26, 0x5b, 0xd3, 0xc2, 0xb9, 0x2a, 0x8e,
		0x22, 0xb6, 0x63, 0xaf, 0x61, 0x0e, 0x90, 0x2b, 0xc1, 0x2a, 0x69, 0xc3,
		0x0c, 0xca, 0x16, 0x8b, 0x94, 0x4c, 0x6d, 0xb4, 0xfb, 0x55, 0x0b, 0x73,
		0x88, 0xee, 0xc2, 0xcf, 0xe1, 0xff, 0xfd, 0x22, 0x2c, 0xa5, 0x0e, 0x77,
		0x96, 0x6e, 0x92, 0xa8, 0x8b, 0xf7, 0x27, 0xba, 0xcd, 0x82, 0xe0, 0x73,
		0x1b, 0x6c, 0x6b, 0x9d, 0x39, 0x09, 0x3a, 0x58, 0x92, 0xb7, 0x45, 0x8b,
		0xed, 0x99, 0x21, 0x19, 0x68, 0x7d, 0x3f, 0xae, 0x4a, 0x9b, 0x93, 0x35,
		0xee, 0xa5, 0x37, 0xf8, 0x46, 0x97, 0x93, 0x41, 0xc1, 0x60, 0xc0, 0x37,
		0x6f, 0x68, 0x2d, 0x43, 0x48, 0xc2, 0xaa, 0x4a, 0x68, 0xfe, 0x1d, 0xf2,
		0x00, 0xfd, 0x7c, 0x7c, 0xd2, 0x3f, 0xde, 0x97, 0xa3, 0x27, 0x7a, 0x3d,
		0xad, 0x9e, 0x4f, 0x61, 0x78, 0xc8, 0x0c, 0x28, 0x85, 0x56, 0x1e, 0xda,
		0xf6, 0xf5, 0x11, 0x2a, 0xb2, 0x9e, 0x96, 0xdf, 0x84, 0xcc, 0x0b, 0x47,
		0xfe, 0x43, 0x20, 0x53, 0x52, 0x68, 0xd7, 0x01, 0xf7, 0x63, 0x18, 0x24,
		0x0b, 0x3b, 0xea, 0x47, 0x08, 0x90, 0x62, 0x39, 0x5a, 0xe4, 0x96, 0x04,
		0x03, 0xc1, 0x5c, 0x8f, 0x7f, 0x4e, 0xd8, 0xfe, 0x9e, 0xec, 0xb8, 0xe8,
		0x7e, 0xfb, 0x72, 0xd2, 0x9b, 0x2d, 0x98, 0x92, 0x2e, 0x43, 0x5b, 0xa7,
		0xa5, 0x74, 0xa7, 0xe5, 0x9d, 0xcb, 0xf8, 0xc7, 0x97, 0xf8, 0x5c, 0x83,
		0x11, 0xae, 0x36, 0x9a, 0x6c, 0x99, 0xb2, 0xe2, 0x9c, 0x62, 0x74, 0xf4,
		0xe9, 0xed, 0x99, 0x0a, 0x96, 0x1f, 0xf5, 0xf6, 0x8c, 0xa1, 0xc5, 0xb2,
		0x04, 0x53, 0x88, 0xd3, 0xaa, 0x79, 0x8c, 0xd2, 0x19, 0x38, 0x0f, 0xd9,
		0x25, 0x3a, 0x1c, 0xb2, 0x97, 0xd2, 0x48, 0xcd, 0xa1, 0x79, 0xa2, 0x3f,
		0x44, 0xfa, 0x00, 0xd9, 0x8b, 0x70, 0xf4, 0x79, 0xae, 0xc9, 0xf3, 0x61,
		0x29, 0xb5, 0x68, 0xc8, 0xb8, 0x23, 0xa0, 0x8d, 0xc5, 0xfe, 0x7e, 0x7b,
		0xbb, 0x3d, 0x1e, 0xa3, 0xc6, 0xce, 0xb9, 0x5a, 0x79, 0xa0, 0x33, 0x05,
		0x56, 0xa0, 0xdb, 0x58, 0x39, 0xb1, 0x77, 0xe7, 0x99, 0x4e, 0x8d, 0x85,
		0x15, 0x4f, 0xb8, 0xdc, 0x6f, 0x92, 0x74, 0xf3, 0x15, 0xfd, 0x45, 0xd7,
		0x78, 0x6d, 0x0c, 0x1e, 0x26, 0x51, 0x8a, 0xf3, 0xe0, 0xcd, 0x74, 0xb9,
		0xbc, 0x56, 0x10, 0xd0, 0xa5, 0xb0, 0x96, 0xe5, 0x1f, 0xe6, 0x8c, 0x30,
		0x6a, 0xe8, 0xc7, 0xca, 0xef, 0x0e, 0x39, 0x73, 0xec, 0x1d, 0xc9, 0x91,
		0x08, 0x2c, 0xdc, 0x2c, 0xd0, 0x45, 0xe1, 0x3f, 0xa1, 0x36, 0x24, 0x35,
		0xd0, 0x58, 0xe1, 0xfb, 0x5f, 0x58, 0xa2, 0xc1, 0x11, 0x5b, 0x57, 0x15,
		0x18, 0x37, 0x95, 0xce, 0x5e, 0xc8, 0xe7, 0x38, 0x1e, 0xca, 0x7c, 0xee,
		0xdd, 0x41, 0x89, 0xf9, 0xd8, 0x67, 0x16, 0x2f, 0x86, 0x85, 0xbf, 0xa4,
		0x7a, 0x29, 0xb0, 0x17, 0x66, 0xab, 0xa0, 0x89, 0x49, 0x21, 0x39, 0x17,
		0x38, 0xea, 0xd8, 0xc0, 0x29, 0xf0, 0xc3, 0x55, 0xbb, 0x47, 0x2b, 0xc6,
		0xb9, 0xd4, 0x79, 0x4c, 0x56, 0xdd, 0xba, 0x64, 0x26, 0x97, 0x7a, 0x5c,
		0x36, 0x92, 0xbb, 0x22, 0x26, 0x77, 0xab, 0xd5, 0xbf, 0x1d, 0x50, 0xb4,
		0xa3, 0x32, 0x47, 0x52, 0x96, 0xbd, 0xe4, 0x06, 0x6a, 0xcd, 0x63, 0x92,
		0x1b, 0x76, 0x68, 0x79, 0xfd, 0xdd, 0xd1, 0xf3, 0xce, 0xed, 0x4d, 0x21,
		0x9d, 0xb8, 0x48, 0x34, 0xe9, 0x08, 0xbf, 0x88, 0xf2, 0xfd, 0x6f, 0xbf,
		0x0b, 0xac, 0xf4, 0x67, 0x19, 0x13, 0x96, 0x5a, 0x50, 0xf5, 0x10, 0xcc,
		0x41, 0x15, 0xcf, 0xf7, 0x29, 0xb1, 0x75, 0x27, 0x80, 0xe9, 0x54, 0xcf,
		0x90, 0x14, 0x9c, 0x83, 0x32, 0x26, 0x9f, 0x06, 0x60, 0xaa, 0x0f, 0xab,
		0x1d, 0x74, 0x59, 0xf8, 0xb9, 0xef, 0xd3, 0x98, 0x04, 0x0e, 0xb2, 0xe6,
		0xd1, 0xce, 0xb3, 0xb9, 0xa2, 0x73, 0x20, 0xbd, 0x3b, 0x13, 0x5a, 0xbd,
		0x5e, 0x29, 0xf7, 0xc5, 0x43, 0xc5, 0xb6, 0xf0, 0xdd, 0x80, 0x5d, 0x11,
		0xf5, 0x5f, 0x27, 0x7f, 0xcc, 0xf8, 0x87, 0x5d, 0x44, 0x24, 0x5f, 0x53,
		0x7f, 0x71, 0xf7, 0x4d, 0x85, 0x7b, 0x7a, 0x63, 0xd4, 0x7d, 0xd0, 0x7e,
		0x07, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x9e, 0xa3, 0x2f, 0xd8, 0x06, 0x00,
		0x00,
	}))

	if err != nil {
		panic("Decompression failed: " + err.Error())
	}

	var b bytes.Buffer
	io.Copy(&b, gz)
	gz.Close()

	return b.Bytes()
}
